{
  "name": "ngrok-services",
  "version": "0.1.0",
  "description": "ngrok (tunneling) manager",
  "main": "index.js",
  "keywords": [
    "ngrok",
    "tunneling",
    "services",
    "public ip"
  ],
  "bin": {
    "ngrok-services": "./bin/ngrok-services"
  },
  "scripts": {
    "test": "./node_modules/.bin/mocha --reporter spec"
  },
  "repo": {
    "url": "https://github.com/lightsofapollo/ngrok-services",
    "type": "git"
  },
  "author": {
    "name": "James Lal [:lightsofapollo]"
  },
  "license": "MIT",
  "dependencies": {
    "commander": "~2.1.0",
    "promise": "~3.2.0",
    "ngrok": "git://github.com/lightsofapollo/ngrok.git#54aed32a0c2d7d69e409951deddb4f5593641893",
    "debug": "~0.7.4"
  },
  "devDependencies": {
    "mocha": "~1.17.1",
    "mocha-as-promised": "~2.0.0"
  },
  "readme": "# ngrok-services\n\nNode based wrapper for ngrok... Ideally this would be baked into ngrok\n(or as a go client) but as an inital PoC I wrote this by wrapping ngrok.\n\n## Features\n\n  - machine readable (json) output\n  - json config files to generate unique (public) hostnames.\n\n## Usage\n\ncreate a `ngrok_services.json` (can also be a js file) like this:\n\n``` json\n{\n  \"http\": { \"port\": 8080 },\n  \"amqp\": { \"port\": 5701, \"proto\": \"tcp\", \"authtoken\": \"...\" },\n}\n```\n\nThen it can be manipulated via `ngrok-services`:\n\n```sh\n# usage is global ngrok-services might be at ./node_modules/.bin/ngrok-services\nngrok-services start\nngrok-services stop\nngrok-services restart\n```\n\n```sh\n# can also be used with paths\nngrok-services start some_folder\nngrok-services stop some_folder\nngrok-services restart some_folder\n```\n",
  "readmeFilename": "README.md",
  "_id": "ngrok-services@0.1.0",
  "_from": "ngrok-services@"
}
